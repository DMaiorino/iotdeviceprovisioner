#!python
from __future__ import print_function
import argparse
import os
import platform
import boto3
from iotdeviceprovisioner import provision_device
from iotbotocredentialprovider.AWS import default_iot_metadata_path
default_device_name = platform.node().replace(".", "_")

default_stage = "beta"

parser = argparse.ArgumentParser()
parser.add_argument("--device-name",
                    help="The AWS IoT Device Name/ID",
                    default=default_device_name)
parser.add_argument("--directory",
                    help="The path to store IoT metadata and certificates defaults to %s" % default_iot_metadata_path,
                    default=default_iot_metadata_path)
parser.add_argument("--region",
                    help="Region in which to provision device",
                    required=True)
parser.add_argument("--stage",
                    help="Stage in which to provision device (beta, gamma, prod)",
                    default=default_stage)
parser.add_argument("--no-allow-rotate",
                    help="Normal behavior is to rotate certificates if a device is provisions, this forces provisioning to fail",
                    action="store_false",
                    default=True)

args = parser.parse_args()

if not os.path.isdir(args.directory):
    raise RuntimeError("%s must be a directory" % args.directory)


boto3_session = boto3.session.Session(region_name=args.region)

provision_device(args.device_name,
                 args.stage,
                 args.directory,
                 allow_rotate=args.no_allow_rotate,
                 boto3_session=boto3_session)

